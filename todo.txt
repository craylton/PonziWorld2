

Next up:
Make all purchases come out of cash
Put assets in the history collection
    Also display that history when you click an asset
Apply pending transactions on new day
Combine all popups into a base component
    Capital popup
    Asset detail popup
    Transaction popup
    Loading popup
Ensure currencies are stored in correct format
    Need to be displayed to the user as ints
    Need to be stored as floating points
    Also need to be huge, both positive and negative
Redesign header so that claimed and actual capitals are in same graph
Put some of the main components and so on into copilot instructions
Make sure /bank caters to multiple banks per player
    Currently it does a FindOne to get the only bank for this player
    this will break later on
    Create a separate /newBank endpoint
    The dashboard really should list all the player's banks, and then you can look into one to see performance
Rename performance / performance history into historicalPerformance
Somehow prevent services from being passed into other services



FUTURE THINGS:

Some logging would be nice

Defensive programming when retrieving data from DB
    Documents could be the wrong shape
    even if my app always write the right shape
    for now only need to check username and bank name
    the capital fields will eventually be located somewhere else

Make a tutorial
    When you first log in, Grandma lends you some money so you can get started
    To start with you only have access to some low-risk instruments
    Then introduce game mechanics one-by-one
    Important to not make the tutorial too long, since each 'turn' is a day
        Don't want it to take a week before you can even play the game
        So need to think of a way to cram lots of changes into the first couple of 'turns'

JWT secret
    What is this?
    Need to do some research

Caching
    Very little changes throughout the day
    Making the same request twice will almost always return the same thing
    Might as well put everything in a cache

Other things to consider
    Inflation
        If you put your money in a HYSA and never lie, you'll keep making more money
        So the total amount of money in the system will keep going up
        So do lawyers etc need to become more expensive over time?
        What about when £1m is eventually considered a tiny amount?
        Do I just routinely divide everyone's money by 1000 or something?
        or maybe whenever the cheapest thing in the game reaches £1000, divide everything by 1000
    Rewards for logging in each day
        Sometimes people might find simply leaving their money in stocks and never managing anything might be a reasonable strategy
        So I guess every day there's a chance of something bad happening that the player needs to avoid
        But I feel like there should be a good thing for logging in too, like a new investor or reduced fixed costs
    Monetisation?
        Probably way too early to think about this but who knows, maybe this project will actually get finished some day
        I'm thinking you could pay for some level of automation
            Like you could collect your daily perks without having to log in
            Or you could have a layer of protection against whatever bad things happen when you don't log in
            But then again that encourages people to not log in, which is kinda the opposite of what I want
        Or you could just pay for money
            But then it's a pay to win game


FIGURING OUT HOW MUCH MONEY EACH BANK HAS
The following criteria make this problem very tricky:
    A can invest in B, and B can just invest back into A
    A and B both pay their own fixed costs each day
    A and B can both lie about their profits each day
Now scale this up to where there are hundreds of banks all invested in one another
    It's easy to se how this can be a nightmare
So here's what we have:
    A resolutions collection
        at first this collection is empty
        Fields in this collection are:
            asset ID
            resolution level
            is resolved
            original investement size
            new actual investment size
            claimed percentage
    A list of banks
    A list of investments
        this tells us which banks have invested in other banks (or other assets)
        from this, given a bank, we can compile a list of everything it's invested in
        we also get how much has been invested in each asset
    A list of NPC assets
        These are things like stocks, bonds etc, as well as NPC controlled banks
And here is the hacky solution to our problem:
    1. Populate the resolutions collection with an entry for each NPC asset
        resolution level can be set to some arbitrary large value like int.max
        is resolved is set to true
        original and new actual investment size can be 0
        claimed percentage is generated according to some pseudo random function, based on the asset
    2. For each bank which is not marked as resolved:
        Get a list of every asset this bank is invested in
        look up each of those assets in the resolutions collection
            if all of them are resolved in that collection, we can mark this bank as resolved too
                resolution level can be set to arbitrary large value
                is resolved is set to true
                original investment size can be determined from existing data
                new actual investment size can be calculated based on existing data
                claimed percentage is calculated from the other two fields plus what the user configured
    3. Count the number of rows added to the resolutions collection in step 2
        If the count was greater than 0, go back to step 2
Side note: after step 3, when the count is 0:
It's a guarantee that every remaining bank is in some kind of circular dependency
    4. a. Loop through every bank which is not marked as resolved
        For each asset that this bank has invested in:
            if it is in the resolutions, calculate how much is now invested
                important to use the claimed percentage for this calculation
                also keep track of the resolution level
            if not in resolutions, we assume the investment size hasn't changed
                here we say that resolution level is 0 for future use
        b. Add the bank to the resolutions
            resolution level should be (whatever was the lowest recorded resolution level) + 1
            is resolved is set to false
            original investment size can be determined from existing data
            new actual investement size can be calculated from 4a
            claimed percentage is calculated from the above two fields plus what the user configured
Note: at this point every single bank should have an entry in the resolutions
    5. a. Now loop through every bank which is not resolved
        For each asset that this bank has invested in:
            take note of the new investment amount (based on claimed percentage)
            keep track of the resolution level
        b. get the bank's actual investment size from the existing resolution
            compare this to the new investment amounts calculated from 5a
            if the change is below some threshold, keep note of this
        c. Modify the bank's entry in the resolutions
            resolution level should be (whatever was the lowest recorded resolution level) + 1
            is resolved is set according to some as yet undetermined heuristic based on 5b
            original investment size is unchanged
            new actual investement size can be calculated from 5a
            claimed percentage is calculated from the above two fields plus what the user configured
    6. If any entries in the resolutions are stil marked as no resolved, go back to 5
        If all are resolved, we're basically done!
        Just need to update the values in the real db now based on these resolutions
I expect this algorithm to be very slow...thankfully it only needs to be run once per day
Still need to figure out the termination criteria - see 5c
I could probably make it more efficient each asset's investments in its resolution entry
The calculation to find the actual investment size needs to be:
    The new sum of all investments
        This includes cash
    Minus any costs
And then the claimed amount should be newValue/oldValue + ponziFactor