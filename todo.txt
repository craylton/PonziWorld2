
Next up:
Allow user to queue up orders
    as in, you can say you want to buy something, but it doesn't actually buy it until the following day
    this requires a 'pending orders' collection containing bank ID, asset ID, amount
Put assets in the history collection
    Also display that history when you click an asset
Design the DB
    A player can log on at any time during the day and make changes to their investments
        Need some kind of holding area
    Every time you invest in an asset, you might also become an investor
        So need some kind of investor -> investee collection
Ensure currencies are stored in correct format
    Need to be displayed to the user as ints
    Need to be stored as floating points


FUTURE THINGS:

Defensive programming when retrieving data from DB
    Documents could be the wrong shape
    even if my app always write the right shape
    for now only need to check username and bank name
    the capital fields will eventually be located somewhere else

Make sure /bank caters to multiple banks per player
    Currently it does a FindOne to get the only bank for this player
    this will break later on
    Create a separate /newBank endpoint
    The dashboard really should list all the player's banks, and then you can look into one to see performance

Make a tutorial
    When you first log in, Grandma lends you some money so you can get started
    To start with you only have access to some low-risk instruments
    Then introduce game mechanics one-by-one
    Important to not make the tutorial too long, since each 'turn' is a day
        Don't want it to take a week before you can even play the game
        So need to think of a way to cram lots of changes into the first couple of 'turns'

JWT secret
    What is this?
    Need to do some research

Caching
    Very little changes throughout the day
    Making the same request twice will almost always return the same thing
    Might as well put everything in a cache

Other things to consider
    Inflation
        If you put your money in a HYSA and never lie, you'll keep making more money
        So the total amount of money in the system will keep going up
        So do lawyers etc need to become more expensive over time?
        What about when £1m is eventually considered a tiny amount?
        Do I just routinely divide everyone's money by 1000 or something?
        or maybe whenever the cheapest thing in the game reaches £1000, divide everything by 1000
    Rewards for logging in each day
        Sometimes people might find simply leaving their money in stocks and never managing anything might be a reasonable strategy
        So I guess every day there's a chance of something bad happening that the player needs to avoid
        But I feel like there should be a good thing for logging in too, like a new investor or reduced fixed costs
    Monetisation?
        Probably way too early to think about this but who knows, maybe this project will actually get finished some day


FIGURING OUT HOW MUCH MONEY EACH BANK HAS
This is complicated because A can invest in B, who can then invest in A again
And this could be a really complicated loop with hundreds of banks all investing in one another
So think about it this way: we have a list of 'resolved' banks
    Each resolved bank is just a bank ID, its previous value and its resolved value
    At first the list is empty
1. We loop through each bank
    Get a list of everything this bank has invested in
    If everything in that list is either non-player or in the resolved list,
        We can resolve this bank and add it to the resolved banks list
2. We then do step 1 again
Each time we do this, we need to keep track of whether we actually resolved anything
When we finally do an iteration where nothing is resolved, got the step 3
3. Find a bank which meets all these criteria:
    is not in the resolved list
    has other banks investing in it
    is invested in a resolved or non player asset
4. For each bank found in step 3:
    find all of the resolved banks and apply them
    find all of the partially resolved banks and apply them
    assume that any unresolved investments are unchanged
    store the bank as partially resolved level 1
5. Repeat step 4 a few times until it converges
    On each iteration we should increment the partial resolution level